[gd_scene load_steps=46 format=3 uid="uid://ba6dv44hes306"]

[ext_resource type="Script" path="res://scripts/player.gd" id="1_73ku8"]
[ext_resource type="Texture2D" uid="uid://bwybfieyhdhpf" path="res://assets/PC Computer - Touhou Seirensen Undefined Fantastic Object - Reimu Hakurei.png" id="2_65rto"]
[ext_resource type="Texture2D" uid="uid://d2ms0fqql1iom" path="res://assets/PC Computer - Touhou Chireiden Subterranean Animism - Bullets.png" id="3_tswq1"]
[ext_resource type="Script" path="res://addons/BulletUpHell/SpawnPatterns/PatternCircle.gd" id="4_xvl6m"]
[ext_resource type="Script" path="res://scripts/mod.gd" id="7_7b5gn"]
[ext_resource type="Script" path="res://addons/BulletUpHell/Nodes/BuHBulletProperties.gd" id="7_7frx6"]
[ext_resource type="Script" path="res://addons/BulletUpHell/Bullet/animStates.gd" id="7_avh7n"]
[ext_resource type="Script" path="res://addons/BulletUpHell/Bullet/BulletProps.gd" id="8_6lfmf"]
[ext_resource type="Script" path="res://addons/BulletUpHell/Nodes/BuHPattern.gd" id="8_gq8sk"]
[ext_resource type="Script" path="res://addons/BulletUpHell/SpawnPatterns/PatternOne.gd" id="9_8wm0y"]

[sub_resource type="AtlasTexture" id="AtlasTexture_ald18"]
atlas = ExtResource("2_65rto")
region = Rect2(130, 48, 32, 48)

[sub_resource type="AtlasTexture" id="AtlasTexture_cwibl"]
atlas = ExtResource("2_65rto")
region = Rect2(162, 48, 32, 48)

[sub_resource type="AtlasTexture" id="AtlasTexture_5c468"]
atlas = ExtResource("2_65rto")
region = Rect2(194, 48, 32, 48)

[sub_resource type="AtlasTexture" id="AtlasTexture_p4ec0"]
atlas = ExtResource("2_65rto")
region = Rect2(226, 48, 32, 48)

[sub_resource type="AtlasTexture" id="AtlasTexture_pfyi5"]
atlas = ExtResource("2_65rto")
region = Rect2(1, 0, 32, 48)

[sub_resource type="AtlasTexture" id="AtlasTexture_j0bc7"]
atlas = ExtResource("2_65rto")
region = Rect2(33, 0, 32, 48)

[sub_resource type="AtlasTexture" id="AtlasTexture_psl32"]
atlas = ExtResource("2_65rto")
region = Rect2(65, 0, 32, 48)

[sub_resource type="AtlasTexture" id="AtlasTexture_mn18u"]
atlas = ExtResource("2_65rto")
region = Rect2(97, 0, 32, 48)

[sub_resource type="AtlasTexture" id="AtlasTexture_n2d3n"]
atlas = ExtResource("2_65rto")
region = Rect2(129, 0, 32, 48)

[sub_resource type="AtlasTexture" id="AtlasTexture_1k64y"]
atlas = ExtResource("2_65rto")
region = Rect2(161, 0, 32, 48)

[sub_resource type="AtlasTexture" id="AtlasTexture_uvgw0"]
atlas = ExtResource("2_65rto")
region = Rect2(193, 0, 32, 48)

[sub_resource type="AtlasTexture" id="AtlasTexture_s72si"]
atlas = ExtResource("2_65rto")
region = Rect2(225, 0, 32, 48)

[sub_resource type="AtlasTexture" id="AtlasTexture_8gr4p"]
atlas = ExtResource("2_65rto")
region = Rect2(128, 96, 32, 48)

[sub_resource type="AtlasTexture" id="AtlasTexture_omwx2"]
atlas = ExtResource("2_65rto")
region = Rect2(160, 96, 32, 48)

[sub_resource type="AtlasTexture" id="AtlasTexture_0b618"]
atlas = ExtResource("2_65rto")
region = Rect2(192, 96, 32, 48)

[sub_resource type="AtlasTexture" id="AtlasTexture_ajr4s"]
atlas = ExtResource("2_65rto")
region = Rect2(224, 96, 32, 48)

[sub_resource type="SpriteFrames" id="SpriteFrames_1axba"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_ald18")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_cwibl")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_5c468")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_p4ec0")
}],
"loop": true,
"name": &"left",
"speed": 10.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_pfyi5")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_j0bc7")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_psl32")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_mn18u")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_n2d3n")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_1k64y")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_uvgw0")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_s72si")
}],
"loop": true,
"name": &"neutral",
"speed": 10.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_8gr4p")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_omwx2")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_0b618")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ajr4s")
}],
"loop": true,
"name": &"right",
"speed": 10.0
}]

[sub_resource type="AtlasTexture" id="AtlasTexture_n0v32"]
atlas = ExtResource("3_tswq1")
region = Rect2(302, 49, 12, 11)

[sub_resource type="CircleShape2D" id="CircleShape2D_wnj72"]
radius = 4.0

[sub_resource type="GDScript" id="GDScript_xrwi7"]
script/source = "@tool
extends Node2D


var auto_pattern_id:String = \"\"
var auto_start_on_cam:bool = true
var auto_start_after_time:float = 0.0
var auto_start_at_distance:float = 5
var auto_distance_from:NodePath
var trigger_container:NodePath

var trig_container:TriggerContainer
var trigger_counter = 0
var trig_iter:Dictionary
var trigger_timeout:bool = false
var trigger_time:float = 0
var trig_collider
var trig_signal

var rotating_speed = 0.0
var active:bool = true
var shared_area_name = \"0\"
var shared_area
var pool_amount:int = 50

var r_randomisation_chances:float
var r_active_chances:float
var r_shared_area_choice:String
var r_rotating_variation:Vector3
var r_pattern_choice:String
var r_start_time_choice:String
var r_start_time_variation:Vector3

var auto_call:bool = false
var can_respawn:bool = true

func _ready():
	if Engine.is_editor_hint(): return
	
	if shared_area_name != \"\":
		shared_area = Spawning.get_shared_area(shared_area_name)
	else: push_error(\"Spawnpoint doesn't have any shared_area\")
		
	if auto_start_on_cam:
		assert(auto_pattern_id != \"\")
		var instance = VisibleOnScreenNotifier2D.new()
		instance.connect(\"screen_entered\",Callable(self,\"on_screen\").bind(true))
		instance.connect(\"screen_exited\",Callable(self,\"on_screen\").bind(false))
	elif auto_distance_from != NodePath(): set_physics_process(true)
	elif auto_pattern_id != \"\":
		if auto_start_after_time > float(0.0):
			await get_tree().create_timer(auto_start_after_time).timeout
		auto_call = true
		set_physics_process(active)
		
	if active and auto_pattern_id != \"\":
		if auto_start_after_time > float(0.0):
			await get_tree().create_timer(auto_start_after_time).timeout
		auto_call = true
		set_physics_process(active)
		
	if rotating_speed > 0: set_physics_process(active)
		
	if active and pool_amount > 0:
		call_deferred(\"set_pool\")
		
	if trigger_container:
		trig_container = get_node(trigger_container)
#		set_physics_process(false)

func set_pool():
	var props = Spawning.pattern(auto_pattern_id)[\"bullet\"]
	Spawning.create_pool(props, shared_area_name, pool_amount, !Spawning.bullet(props).has(\"anim_idle\"))

var _delta:float
func _physics_process(delta):
	if Engine.is_editor_hint(): return
	_delta = delta
	rotate(rotating_speed)
	if trig_container:
		checkTrigger()
		return
	
	if auto_distance_from != NodePath() and global_position.distance_to(get_node(auto_distance_from).global_position) <= auto_start_at_distance:
		active = true
	
	if can_respawn and auto_call and active and auto_pattern_id != \"\":
		call_deferred(\"callAction\")
		can_respawn = false
		if not rotating_speed > 0: set_physics_process(false)
		

func on_screen(is_on):
	if is_on and auto_start_after_time > float(0.0):
		await get_tree().create_timer(auto_start_after_time).timeout
	active = is_on
	set_physics_process(active)

func triggerSignal(sig):
	trig_signal = sig
	checkTrigger()

func trig_timeout(time:float=0):
	trigger_time += _delta
	if trigger_time >= time:
		trigger_timeout = true
		trigger_time = 0
		return true
	return false
#	checkTrigger()

func checkTrigger():
	if not (active and auto_pattern_id != \"\" and trig_container): return
	trig_container.checkTriggers(self, self)
#		Spawning.spawn(self, auto_pattern_id, shared_area_name)

func callAction():
	Spawning.spawn(self, auto_pattern_id, shared_area_name)

func _get_property_list() -> Array:
	return [
		{
			name = \"active\",
			type = TYPE_BOOL,
			usage = PROPERTY_USAGE_DEFAULT
		},{
			name = \"auto_pattern_id\",
			type = TYPE_STRING,
			usage = PROPERTY_USAGE_DEFAULT
		},{
			name = \"shared_area_name\",
			type = TYPE_STRING,
			usage = PROPERTY_USAGE_DEFAULT
		},{
			name = \"rotating_speed\",
			type = TYPE_FLOAT,
			usage = PROPERTY_USAGE_DEFAULT
		},{
			name = \"pool_amount\",
			type = TYPE_INT,
			usage = PROPERTY_USAGE_DEFAULT
		},{
			name = \"Autostart & Triggering\",
			type = TYPE_NIL,
			hint_string = \"auto_\",
			usage = PROPERTY_USAGE_GROUP
		},{
			name = \"auto_start_on_cam\",
			type = TYPE_BOOL,
			usage = PROPERTY_USAGE_DEFAULT
		},{
			name = \"auto_start_after_time\",
			type = TYPE_FLOAT,
			usage = PROPERTY_USAGE_DEFAULT
		},{
			name = \"auto_start_at_distance\",
			type = TYPE_FLOAT,
			usage = PROPERTY_USAGE_DEFAULT
		},{
			name = \"auto_distance_from\",
			type = TYPE_NODE_PATH,
			usage = PROPERTY_USAGE_DEFAULT
		},{
			name = \"Advanced Triggering\",
			type = TYPE_NIL,
			hint_string = \"trigger_\",
			usage = PROPERTY_USAGE_GROUP
		},{
			name = \"trigger_container\",
			type = TYPE_NODE_PATH,
			usage = PROPERTY_USAGE_DEFAULT
		}
#		,{
#			name = \"Random\",
#			type = TYPE_NIL,
#			hint_string = \"r_\",
#			usage = PROPERTY_USAGE_GROUP
#		},
#		{ name = \"r_randomisation_chances\", type = TYPE_FLOAT,
#			hint = PROPERTY_HINT_RANGE, hint_string = \"0, 1\", usage = PROPERTY_USAGE_DEFAULT },
#		{ name = \"r_active_chances\", type = TYPE_FLOAT,
#			hint = PROPERTY_HINT_RANGE, hint_string = \"0, 1\", usage = PROPERTY_USAGE_DEFAULT },
#		{ name = \"r_shared_area_choice\", type = TYPE_STRING, usage = PROPERTY_USAGE_DEFAULT },
#		{ name = \"r_rotating_variation\", type = TYPE_VECTOR3, usage = PROPERTY_USAGE_DEFAULT },
#		{ name = \"r_pattern_choice\", type = TYPE_ARRAY, usage = PROPERTY_USAGE_DEFAULT },
#		{ name = \"r_start_time_choice\", type = TYPE_STRING, usage = PROPERTY_USAGE_DEFAULT },
#		{ name = \"r_start_time_variation\", type = TYPE_VECTOR3, usage = PROPERTY_USAGE_DEFAULT }
	]
"

[sub_resource type="Curve2D" id="Curve2D_ucuje"]

[sub_resource type="GDScript" id="GDScript_crn0w"]
script/source = "@tool
extends Path2D

@export var id:String = \"\"
@export var pattern:Pattern
@export var preview_spawn:bool = false
@export var preview_shoot:bool = false : set = set_pre_shoot

var preview_bullet:BulletProps


func _ready():
	if not Engine.is_editor_hint() and pattern:
		if pattern.forced_target: pattern.node_target = get_node(pattern.forced_target)
		if pattern.resource_name in [\"PatternCustomShape\",\"PatternCustomPoints\"]:
			pattern.shape = curve
		if pattern.resource_name == \"PatternCustomShape\":
			if pattern.closed_shape: pattern.symmetry_type = 0
			
			var follow = PathFollow2D.new()
			add_child(follow)
			var length = curve.get_baked_length()
			for b in pattern.nbr:
				var pos_on_curve
				if pattern.closed_shape: pos_on_curve = length/pattern.nbr*b
				else: pos_on_curve = length/(pattern.nbr-1)*b
				follow.h_offset = pos_on_curve
				pattern.pos.append(pattern.shape.sample_baked(pos_on_curve).rotated(pattern.pattern_angle)-pattern.center_pos)
				pattern.angles.append(follow.rotation-PI/2)
			remove_child(follow)
			
		elif pattern.resource_name == \"PatternCustomPoints\":
			var point_count = curve.get_point_count()
			pattern.nbr = point_count
			pattern.shape = curve
			var angle;
			for point in point_count:
				var pos = curve.get_point_position(point)
				if pattern.calculate_angles == pattern.ANGLE_TYPE.FromTangeant:
					if point == point_count-1:
						angle = pos.angle_to_point(curve.get_point_position(point-1))+PI/2
					elif point == 0: angle = curve.get_point_position(point+1).angle_to_point(pos)+PI/2
					else: angle = curve.get_point_position(point+1).angle_to_point(curve.get_point_position(point-1))+PI/2
				elif pattern.calculate_angles == pattern.ANGLE_TYPE.FromCenter:
					angle = pattern.center_pos.angle_to_point(pos)+PI
				pattern.pos.append(pos-pattern.center_pos)
				if pattern.calculate_angles != pattern.ANGLE_TYPE.Custom: pattern.angles.append(angle+(PI*int(pattern.reversed_angle)))
		
		elif pattern.resource_name == \"PatternCustomArea\":
			curve_to_polygon()
			if pattern.grid_spawning == Vector2(0,0): area_pooling()
			else: grid_spawning()
		
#		var dict:Dictionary = {}
#		var P
#		for p in pattern.get_property_list():
##			print(p[\"name\"])
#			P = p[\"name\"]
#			if P in [\"__data__\",\"spec_top_level\",\"spec_ally\",\"spec_states\",\"a_angular_equation\",\"mask\",
#					\"RefCounted\",\"Resource\",\"resource_local_to_scene\",\"resource_path\",\"Resource\", \"node_container\",
#					\"resource_name\",\"PackedDataContainer\",\"script\",\"Script Variables\",\"homing_position\",
#					\"Advanced Movement\",\"Advanced Scale\",\"Animations\",\"Homing\",\"Special Properties\",\"Triggers\"]:
#						continue
#			elif P in [\"a_direction_equation\",\"trigger_container\", \"anim_spawn_texture\",\"anim_waiting_texture\",\\
#				\"anim_delete_texture\",\"anim_spawn_collision\",\"anim_waiting_collision\",\"anim_delete_collision\"] \\
#				and pattern.get(P) == \"\": continue
#			elif P in [\"a_speed_multi_iterations\",\"scale_multi_iterations\",\"spec_bounces\",\"spec_rotating_speed\", \\
#						\"spec_warn\",\"spec_explo\"] and pattern.get(P) == 0: continue
#			elif P in [\"spec_tourment\",\"spec_no_collision\"] \\
#				and pattern.get(P) == false: continue
#			elif P == \"homing_target\" and pattern.get(P) == NodePath(): continue
#			elif P == \"homing_position\" and pattern.get(P) == Vector2(): continue
#			elif P in [\"homing_steer\",\"homing_time_start\",\"homing_duration\",\"node_homing\"] \\
#				and not (dict.get(\"homing_target\",false) or dict.get(\"homing_position\",false)): continue
#			elif P in [\"a_speed_multiplier\",\"a_speed_multi_scale\"] \\
#				and not dict.get(\"a_speed_multi_iterations\",false): continue
#			elif P in [\"scale_multiplier\",\"scale_multi_scale\"] \\
#				and not dict.get(\"scale_multi_iterations\",false): continue
#			elif P == \"trigger_wait_for_shot\" and not dict.get(\"trigger_container\",false): continue
#
#			dict[P] = pattern.get(P)
#			if P == \"homing_target\": print(pattern.get(P))
#		print(dict)
#		Spawning.new_pattern(id, dict)
		Spawning.new_pattern(id, pattern)
		queue_free()

func _process(delta):
	if preview_spawn and Engine.is_editor_hint():
		queue_redraw()
#	if pattern != null and pattern.resource_name == \"PatternCustomPoints\" and pattern.calculate_angles == pattern.ANGLE_TYPE.Custom:
#		print(pattern.angles)
#		while curve.get_point_count() > pattern.angles.size():
#			pattern.angles.append(0.0)

func set_pre_shoot(value):
	preview_shoot = value

func _draw():
	if not preview_spawn or pattern == null: return
	if pattern.resource_name in [\"PatternCustomShape\"]:
		var length = curve.get_baked_length()
		var follow
		if preview_shoot:
			follow = PathFollow2D.new()
			add_child(follow)
			
		draw_circle(pattern.center_pos, 10, Color.YELLOW)
		for b in pattern.nbr:
			var pos_on_curve
			if pattern.closed_shape: pos_on_curve = length/pattern.nbr*b
			else: pos_on_curve = length/(pattern.nbr-1)*b
			var pos = curve.sample_baked(pos_on_curve)
			draw_circle(pos, 10, Color.RED)
			
			if preview_shoot:
				follow.h_offset = pos_on_curve
				draw_line(pos, pos+Vector2(32,0).rotated(follow.rotation-PI/2),Color.YELLOW,3)
	#			var points = curve.get_baked_points()
	#			for p in points.size():
	#				points.set(p, points[p])
	#			draw_polyline(points, Color.RED, 2.0)
		if preview_shoot:
			remove_child(follow)
	elif pattern.resource_name in [\"PatternCustomPoints\"]:
		draw_circle(pattern.center_pos, 10, Color.YELLOW)
#		for p in curve.get_point_count(): #TODO PORT GODOT 4
#			draw_string(Label.new().get_font(\"\"), curve.get_point_position(p), str(p), color=Color.RED)
#			draw_string()


func area_pooling():
	var can_loop = false
	var maybe_pos; var tries:int
	for i in pattern.pooling:
		pattern.pos.append([])
		for j in pattern.nbr:
			maybe_pos = Vector2(randf_range(pattern.limit_rect.position.x,pattern.limit_rect.size.x),\\
								randf_range(pattern.limit_rect.position.y,pattern.limit_rect.size.y))
			tries = pattern.tries_max
			while tries > 0 and not Geometry2D.is_point_in_polygon(maybe_pos, pattern.polygon):
				tries -= 1
				maybe_pos = Vector2(randf_range(pattern.limit_rect.position.x,pattern.limit_rect.size.x),\\
									randf_range(pattern.limit_rect.position.y,pattern.limit_rect.size.y))
			pattern.pos[i].append(maybe_pos-pattern.center_pos)

func grid_spawning():
	pattern.pos.append([])
	var maybe_pos
	for x in (pattern.limit_rect.size.x-pattern.limit_rect.position.x)/pattern.grid_spawning.x:
		for y in (pattern.limit_rect.size.y-pattern.limit_rect.position.y)/pattern.grid_spawning.y:
			maybe_pos = pattern.limit_rect.position+Vector2(pattern.grid_spawning.x*x,pattern.grid_spawning.y*y)
			if Geometry2D.is_point_in_polygon(maybe_pos, pattern.polygon):
				pattern.pos[0].append(maybe_pos-pattern.center_pos)
	pattern.nbr = pattern.pos[0].size()
	pattern.pooling = 1

func curve_to_polygon():
	var point:Vector2; var poly:Array
	for p in curve.get_point_count():
		point = curve.get_point_position(p)
		poly.append(point)
		if point.x < pattern.limit_rect.position.x: pattern.limit_rect.position.x = point.x
		if point.x > pattern.limit_rect.size.x: pattern.limit_rect.size.x = point.x
		if point.y < pattern.limit_rect.position.y: pattern.limit_rect.position.y = point.y
		if point.y > pattern.limit_rect.size.y: pattern.limit_rect.size.y = point.y
	pattern.polygon = PackedVector2Array(poly)
"

[sub_resource type="NavigationPolygon" id="NavigationPolygon_fgupn"]
resource_name = "PatternCircle"
script = ExtResource("4_xvl6m")
radius = 0
angle_total = 1.0472
angle_decal = 5.82067
symmetric = false
center = 0
symmetry_type = 0
bullet = "oneB"
nbr = 8
iterations = 1
pattern_angle = 0.0
pattern_angle_target = NodePath("")
pattern_angle_mouse = false
forced_angle = 0.0
forced_target = NodePath("")
forced_lookat_mouse = false
forced_pattern_lookat = true
cooldown_stasis = false
cooldown_spawn = 1.0
cooldown_shoot = 0.0
cooldown_next_spawn = 0.0
cooldown_next_shoot = 0.0
wait_tween_momentum = 0
wait_tween_length = 0.0
wait_tween_time = 0.0

[sub_resource type="Curve2D" id="Curve2D_gvdnt"]

[sub_resource type="GDScript" id="GDScript_6047k"]
script/source = "@tool
extends Path2D

@export var id:String = \"\"
@export var props:PackedDataContainer

const ATEXTURE:int = 0
const ACOLLISION:int = 1
const ASFX:int = 2


func _ready():
	randomize()
	add_to_group(\"BulletProps\")
	if Engine.is_editor_hint():
		if not props: props = BulletProps.new()
		return
	
	if not props is ObjectProps:
		if props.homing_type == props.TARGET_TYPE.ListPositions:
			props.homing_list = props.homing_list_pos.duplicate()
		elif props.homing_type == props.TARGET_TYPE.ListNodes:
			props.homing_list = []
			for n in props.homing_list_nodes: props.homing_list.append(get_node(n))
		elif props.homing_type == props.TARGET_TYPE.MouseCursor:
			props.homing_mouse = true
		if props.homing_target: props.node_homing = get_node(props.homing_target)
		elif props.homing_special_target: props.node_homing = Spawning.get_special_target(props.homing_special_target)
		elif not (props.homing_list.size() < 2 or props.homing_list_ordered): props.homing_list.shuffle()
		
		if props.get(\"a_curve_movement\") > 0:
			assert(curve.get_point_count() > 0, \\
				\"BulletProperties has no curve. Draw one like you'd draw a Path2D with the BulletPattern node\")
			props.curve = curve
	
	var dict:Dictionary = {}; var P:String; var value; var has_random:bool=false;
	var anim_state_name:String
	var allow_random:bool = (props is ObjectProps or randf_range(0,1) <= props.get(\"r_randomisation_chances\"));
	for p in props.get_property_list():
		P = p[\"name\"]
		value = props.get(P)
		if P in [\"__data__\",\"spec_top_level\",\"spec_ally\",\"a_angular_equation\",\"mask\",\"r_randomisation_chances\",
			\"RefCounted\",\"Resource\",\"resource_local_to_scene\",\"resource_path\",\"Resource\",\"node_container\",
			\"resource_name\",\"PackedDataContainer\",\"script\",\"Script Variables\",\"homing_position\", \"homing_list_ordered\", \"homing_type\",
			\"homing_list_pos\",\"homing_list_nodes\",\"Advanced Movement\",\"Advanced Scale\",\"Animations\",\"Homing\",\"Special Properties\",
			\"Triggers\",\"Destruction\",\"Laser Beam\",\"BulletProps.gd\",\"Random\"]:
				continue
		elif P in [\"a_direction_equation\",\"trigger_container\", \"anim_spawn_texture\",\"anim_waiting_texture\",\\
			\"anim_delete_texture\",\"anim_spawn_collision\",\"anim_waiting_collision\",\"anim_delete_collision\",\\
			\"homing_special_target\",\"homing_group\"] and props.get(P) == \"\": continue
		elif P in [\"a_speed_multi_iterations\",\"scale_multi_iterations\",\"spec_bounces\",\"spec_rotating_speed\", \\
			\"spec_warn\",\"spec_explo\",\"spec_skew\",\"spec_modulate_loop\",\"beam_length_per_ray\",\"spec_trail_length\",\\
			\"a_curve_movement\"] and int(props.get(P)) == int(0): continue
		elif P in [\"anim_idle_sfx\",\"anim_spawn_sfx\",\"anim_waiting_sfx\",\"anim_delete_sfx\"] and props.get(P) == -1: continue
		elif P in [\"spec_tourment\",\"spec_no_collision\",\"overwrite_groups\",\"homing_mouse\"] and props.get(P) == false: continue
		elif P == \"homing_target\" and props.get(P) == NodePath(): continue
		elif P == \"homing_position\" and props.get(P) == Vector2(): continue
		elif P in [\"spec_modulate\",\"curve\"] and props.get(P) == null: continue
		elif P in [\"homing_list\",\"homing_surface\",\"groups\"] and props.get(P).is_empty(): continue
		elif P == \"death_outside_box\" and props.get(P) == Rect2(): continue
		
		elif P in [\"homing_steer\",\"homing_time_start\",\"homing_duration\",\"node_homing\"] \\
			and not ((dict.get(\"homing_target\",false) or dict.get(\"homing_position\",false)) \\
			or (dict.get(\"homing_group\",false) or dict.get(\"homing_special_target\",false)) \\
			or (dict.get(\"homing_surface\",false) or dict.get(\"homing_mouse\",false) or dict.get(\"homing_list\",false))): continue
		elif P in [\"a_speed_multiplier\",\"a_speed_multi_scale\"] \\
			and not dict.get(\"a_speed_multi_iterations\",false): continue
		elif P in [\"scale_multiplier\",\"scale_multi_scale\"] \\
			and not dict.get(\"scale_multi_iterations\",false): continue
		elif P in [\"beam_width\",\"beam_bounce_amount\"] \\
			and not dict.get(\"beam_length_per_ray\",false): continue
		elif P == \"trigger_wait_for_shot\" and not dict.has(\"trigger_container\"): continue
		elif P == \"homing_select_in_group\" and not (dict.has(\"homing_group\") or dict.has(\"homing_mouse\")): continue
		elif P in [\"homing_when_list_ends\"] and not dict.has(\"homing_list\"): continue
		elif P in [\"spec_trail_modulate\",\"spec_trail_width\"] and not dict.has(\"spec_trail_length\"): continue
		
		elif P.left(5) == \"anim_\":
			if P == \"anim_more\":
				for a in value: Spawning.set_anim_states(a, P, id)
			elif P == \"anim_idle\":
				if value == null: dict[P] = \"@anim_idle\"
				else:
					Spawning.set_anim_states(value, P, id)
					dict[P] = value.ID
			elif P in [\"anim_spawn\",\"anim_shoot\",\"anim_waiting\",\"anim_delete\"]:
				if value == null: dict[P] = dict[\"anim_idle\"]
				else:
					Spawning.set_anim_states(value, P, id)
					dict[P] = value.ID
			continue
		
		elif P.left(2) == \"r_\":
			if not allow_random or \\
			(p[\"type\"] == TYPE_STRING and props.get(P) == \"\") or \\
			(p[\"type\"] == TYPE_VECTOR3 and props.get(P) == Vector3()) or \\
			(p[\"type\"] == TYPE_FLOAT and props.get(P) == 0.0) or \\
			(p[\"type\"] in [TYPE_ARRAY, TYPE_PACKED_FLOAT32_ARRAY, TYPE_PACKED_INT32_ARRAY, \\
				TYPE_PACKED_STRING_ARRAY, TYPE_PACKED_VECTOR2_ARRAY] and props.get(P).is_empty()): continue
				
			if p[\"type\"] == TYPE_STRING: props.set(P, Array(props.get(P).split(\";\",false)))
			
			if not has_random:
				has_random = true
				dict[\"has_random\"] = true
			
			if p[\"type\"] == TYPE_STRING:
				dict[P] = Array(props.get(P).split(\";\",false))
				continue
		
		elif P == \"instance_id\":
			assert(props.get(P) != \"\", \"Instance_ID field can't be empty in node \"+name)
			if \";\" in props.get(P): props.set(P, Array(props.get(P).split(\";\",false)))
		
		if (\"anim_\" in P and not \"_sfx\" in P) and \";\" in props.get(P):
			props.set(P, Array(props.get(P).split(\";\",false)))
		dict[P] = props.get(P)
	dict[\"__ID__\"] = id
	Spawning.new_bullet(id, dict)
	queue_free()
"

[sub_resource type="Curve" id="Curve_imeu6"]

[sub_resource type="Curve" id="Curve_8q7qs"]

[sub_resource type="PackedDataContainer" id="PackedDataContainer_07meb"]
script = ExtResource("8_6lfmf")
anim_more = Array[ExtResource("7_avh7n")]([])
damage = 1.0
speed = 1500.0
scale = 0.5
angle = -1.5696
groups = PackedStringArray()
spec_bounces = 0
spec_no_collision = false
spec_modulate_loop = 0.0
spec_trail_length = 0.0
spec_trail_width = 0.0
spec_trail_modulate = Color(1, 1, 1, 1)
spec_rotating_speed = 0.0
death_after_time = 0.5
death_outside_box = Rect2(0, 0, 0, 0)
death_from_collision = true
a_direction_equation = ""
a_curve_movement = 0
a_speed_multiplier = SubResource("Curve_imeu6")
a_speed_multi_iterations = 0
a_speed_multi_scale = 0.0
trigger_container = ""
trigger_wait_for_shot = true
homing_type = 0
homing_target = NodePath("")
homing_steer = 0.0
homing_time_start = 0.0
homing_duration = 999.0
scale_multi_iterations = 0
scale_multiplier = SubResource("Curve_8q7qs")
scale_multi_scale = 1.0
r_randomisation_chances = 1.0
r_speed_choice = PackedFloat32Array()
r_speed_variation = Vector3(0, 0, 0)
r_scale_choice = PackedFloat32Array()
r_scale_variation = Vector3(0, 0, 0)
r_angle_choice = PackedFloat32Array()
r_angle_variation = Vector3(0, 0, 0)
r_group_choice = []
r_bounce_choice = PackedInt32Array()
r_bounce_variation = Vector3(0, 0, 0)
r_no_coll_chances = 0.0
r_modulate_variation = Vector3(0, 0, 0)
r_trail_length_variation = Vector3(0, 0, 0)
r_trail_color_variation = Vector3(0, 0, 0)
r_rotating_variation = Vector3(0, 0, 0)
r_death_after_choice = PackedFloat32Array()
r_death_after_variation = Vector3(0, 0, 0)
r_death_outside_chances = 0.0
r_dir_equation_choice = PackedStringArray()
r_curve_choice = []
r_speed_multi_curve_choice = []
r_speed_multi_iter_variation = Vector3(0, 0, 0)
r_speed_multi_scale_variation = Vector3(0, 0, 0)
r_trigger_choice = PackedStringArray()
r_wait_for_shot_chances = 0.0
r_homing_target_choice = []
r_special_target_choice = PackedStringArray()
r_group_target_choice = PackedStringArray()
r_pos_target_choice = PackedVector2Array()
r_steer_choice = PackedFloat32Array()
r_steer_variation = Vector3(0, 0, 0)
r_homing_delay_choice = PackedFloat32Array()
r_homing_delay_variation = Vector3(0, 0, 0)
r_homing_dur_choice = PackedFloat32Array()
r_homing_dur_variation = Vector3(0, 0, 0)
r_scale_multi_curve_choice = []
r_scale_multi_iter_variation = Vector3(0, 0, 0)
r_scale_multi_scale_variation = Vector3(0, 0, 0)

[sub_resource type="Curve2D" id="Curve2D_m4sqg"]

[sub_resource type="Curve" id="Curve_c18m8"]

[sub_resource type="Curve" id="Curve_dt58w"]

[sub_resource type="PackedDataContainer" id="PackedDataContainer_71nfh"]
script = ExtResource("8_6lfmf")
anim_more = Array[ExtResource("7_avh7n")]([])
damage = 1.0
speed = 1500.0
scale = 1.0
angle = 0.0
groups = PackedStringArray()
spec_bounces = 0
spec_no_collision = false
spec_modulate_loop = 0.0
spec_trail_length = 0.0
spec_trail_width = 0.0
spec_trail_modulate = Color(1, 1, 1, 1)
spec_rotating_speed = 0.0
death_after_time = 0.5
death_outside_box = Rect2(0, 0, 0, 0)
death_from_collision = true
a_direction_equation = ""
a_curve_movement = 0
a_speed_multiplier = SubResource("Curve_c18m8")
a_speed_multi_iterations = 0
a_speed_multi_scale = 0.0
trigger_container = ""
trigger_wait_for_shot = true
homing_type = 3
homing_group = "enemy"
homing_select_in_group = 0
homing_steer = 0.1
homing_time_start = 0.0
homing_duration = 999.0
scale_multi_iterations = 0
scale_multiplier = SubResource("Curve_dt58w")
scale_multi_scale = 1.0
r_randomisation_chances = 1.0
r_speed_choice = PackedFloat32Array()
r_speed_variation = Vector3(0, 0, 0)
r_scale_choice = PackedFloat32Array()
r_scale_variation = Vector3(0, 0, 0)
r_angle_choice = PackedFloat32Array()
r_angle_variation = Vector3(0, 0, 0)
r_group_choice = []
r_bounce_choice = PackedInt32Array()
r_bounce_variation = Vector3(0, 0, 0)
r_no_coll_chances = 0.0
r_modulate_variation = Vector3(0, 0, 0)
r_trail_length_variation = Vector3(0, 0, 0)
r_trail_color_variation = Vector3(0, 0, 0)
r_rotating_variation = Vector3(0, 0, 0)
r_death_after_choice = PackedFloat32Array()
r_death_after_variation = Vector3(0, 0, 0)
r_death_outside_chances = 0.0
r_dir_equation_choice = PackedStringArray()
r_curve_choice = []
r_speed_multi_curve_choice = []
r_speed_multi_iter_variation = Vector3(0, 0, 0)
r_speed_multi_scale_variation = Vector3(0, 0, 0)
r_trigger_choice = PackedStringArray()
r_wait_for_shot_chances = 0.0
r_homing_target_choice = []
r_special_target_choice = PackedStringArray()
r_group_target_choice = PackedStringArray()
r_pos_target_choice = PackedVector2Array()
r_steer_choice = PackedFloat32Array()
r_steer_variation = Vector3(0, 0, 0)
r_homing_delay_choice = PackedFloat32Array()
r_homing_delay_variation = Vector3(0, 0, 0)
r_homing_dur_choice = PackedFloat32Array()
r_homing_dur_variation = Vector3(0, 0, 0)
r_scale_multi_curve_choice = []
r_scale_multi_iter_variation = Vector3(0, 0, 0)
r_scale_multi_scale_variation = Vector3(0, 0, 0)

[sub_resource type="Curve2D" id="Curve2D_ueu4d"]

[sub_resource type="NavigationPolygon" id="NavigationPolygon_koawm"]
resource_name = "PatternOne"
script = ExtResource("9_8wm0y")
bullet = "modBullet"
nbr = 1
iterations = 1
pattern_angle = 0.0
pattern_angle_target = NodePath("")
pattern_angle_mouse = false
forced_angle = -1.5708
forced_target = NodePath("")
forced_lookat_mouse = false
forced_pattern_lookat = true
cooldown_stasis = false
cooldown_spawn = 1.0
cooldown_shoot = 0.0
cooldown_next_spawn = 0.0
cooldown_next_shoot = 0.0
wait_tween_momentum = 0
wait_tween_length = 0.0
wait_tween_time = 0.0

[sub_resource type="AtlasTexture" id="AtlasTexture_rjtp4"]
atlas = ExtResource("2_65rto")
region = Rect2(82, 146, 15, 15)

[node name="Player" type="CharacterBody2D"]
collision_layer = 2
collision_mask = 2
motion_mode = 1
script = ExtResource("1_73ku8")
max_speed = 300
min_speed = 100

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
modulate = Color(1, 1, 1, 0.784314)
sprite_frames = SubResource("SpriteFrames_1axba")
animation = &"neutral"

[node name="focus" type="Sprite2D" parent="."]
visible = false
texture = SubResource("AtlasTexture_n0v32")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("CircleShape2D_wnj72")

[node name="SpawnPoint" type="Node2D" parent="."]
modulate = Color(1, 1, 1, 0.196078)
position = Vector2(0, -15)
script = SubResource("GDScript_xrwi7")
active = false
auto_pattern_id = "oneP"
shared_area_name = "0"
rotating_speed = 0.0
pool_amount = 50
auto_start_on_cam = false
auto_start_after_time = 0.0
auto_start_at_distance = 5.0
auto_distance_from = NodePath("")
trigger_container = NodePath("")

[node name="SpawnPattern" type="Path2D" parent="."]
position = Vector2(0, -15)
curve = SubResource("Curve2D_ucuje")
script = SubResource("GDScript_crn0w")
id = "oneP"
pattern = SubResource("NavigationPolygon_fgupn")

[node name="BulletPattern" type="Path2D" parent="."]
position = Vector2(0, -15)
curve = SubResource("Curve2D_gvdnt")
script = SubResource("GDScript_6047k")
id = "oneB"
props = SubResource("PackedDataContainer_07meb")

[node name="modBullet" type="Path2D" parent="."]
position = Vector2(30, 0)
curve = SubResource("Curve2D_m4sqg")
script = ExtResource("7_7frx6")
id = "modBullet"
props = SubResource("PackedDataContainer_71nfh")

[node name="modPattern" type="Path2D" parent="."]
position = Vector2(30, 0)
curve = SubResource("Curve2D_ueu4d")
script = ExtResource("8_gq8sk")
id = "modPattern"
pattern = SubResource("NavigationPolygon_koawm")

[node name="modR" type="Node2D" parent="."]
modulate = Color(1, 1, 1, 0.392157)
position = Vector2(30, 0)
script = ExtResource("7_7b5gn")

[node name="Sprite2D" type="Sprite2D" parent="modR"]
texture = SubResource("AtlasTexture_rjtp4")

[node name="modL" type="Node2D" parent="."]
modulate = Color(1, 1, 1, 0.392157)
position = Vector2(-30, 0)
script = ExtResource("7_7b5gn")

[node name="Sprite2D" type="Sprite2D" parent="modL"]
texture = SubResource("AtlasTexture_rjtp4")
